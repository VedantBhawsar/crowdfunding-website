datasource mongodb {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  userId            String   @mongodb.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  sessionToken String   @unique
  userId       String   @mongodb.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model User {
  id                      String                @id @default(auto()) @map("_id") @mongodb.ObjectId
  name                    String?
  displayName             String?
  email                   String?               @unique
  emailVerified           DateTime?
  image                   String?
  onboarded               Boolean               @default(false)
  role                    UserRole              @default(INVESTOR)
  bio                     String?
  location                String?
  walletAddress           String?
  failedLoginAttempts     Int                   @default(0)
  lastLoginAt             DateTime?
  bannedUntil             DateTime?
  isVerified              Boolean               @default(false)
  accounts                Account[]
  sessions                Session[]
  wallet                  Wallet?
  createdCampaigns        Campaign[]            @relation("UserCampaigns")
  backings                Backers[]             @relation("UserBackings")
  transactions            Transaction[]         @relation("UserTransactions")
  comments                Comment[]             @relation("UserComments")
  organizationMemberships UserOrg[]
  notificationSettings    NotificationSettings?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  isDeleted               Boolean               @default(false)
  deletedAt               DateTime?

  @@index([role])
  @@index([isVerified])
}

enum UserRole {
  INVESTOR
  CREATOR
  ADMIN
}

model Wallet {
  id                String    @id @default(auto()) @map("_id") @mongodb.ObjectId
  address           String    @unique
  isConnected       Boolean
  caipAddress       String
  status            String
  balance           Float     @default(0)
  lastTransactionAt DateTime?
  networkId         String? // For multi-chain support
  userId            String?   @unique @mongodb.ObjectId
  user              User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Campaign {
  id               String           @id @default(auto()) @map("_id") @mongodb.ObjectId
  slug             String           @unique
  title            String
  shortDescription String
  description      String
  goal             Float
  raisedAmount     Float            @default(0)
  startDate        DateTime
  endDate          DateTime
  ipfsHash         String?
  images           String[]
  category         CampaignCategory
  tags             String[]
  riskAssessment   String?
  website          String?
  twitter          String?
  instagram        String?
  linkedin         String?
  github           String?
  creatorId        String?          @mongodb.ObjectId
  creatorName      String
  creatorAvatar    String
  milestones       Milestone[]      @relation("CampaignMilestones")
  rewards          Reward[]         @relation("CampaignRewards")
  backers          Backers[]        @relation("CampaignBackers")
  transactions     Transaction[]    @relation("CampaignTransactions")
  creator          User?            @relation("UserCampaigns", fields: [creatorId], references: [id], onDelete: SetNull)
  activities       Activity[]       @relation("CampaignActivities")
  comments         Comment[]        @relation("CampaignComments")
  status           CampaignStatus   @default(DRAFT)
  featured         Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isDeleted        Boolean          @default(false)
  deletedAt        DateTime?

  @@index([status])
  @@index([creatorId])
  @@index([category])
  @@index([featured])
}

enum CampaignCategory {
  TECHNOLOGY
  ARTS
  GAMES
  FILM
  MUSIC
  DESIGN
  FOOD
  PUBLISHING
  FASHION
  COMMUNITY
  OTHER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  FUNDED
  COMPLETED
  CANCELLED
}

model Transaction {
  id         String            @id @default(auto()) @map("_id") @mongodb.ObjectId
  amount     Float
  userId     String            @mongodb.ObjectId
  user       User              @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
  campaignId String            @mongodb.ObjectId
  campaign   Campaign          @relation("CampaignTransactions", fields: [campaignId], references: [id], onDelete: Cascade)
  rewardId   String?           @mongodb.ObjectId
  reward     Reward?           @relation(fields: [rewardId], references: [id], onDelete: SetNull)
  txHash     String? // Blockchain transaction hash
  fee        Float? // Platform fee or gas fee
  status     TransactionStatus @default(PENDING)
  metadata   Json? // Additional transaction data
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([status])
  @@index([userId, campaignId])
  @@index([txHash])
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Backers {
  id          String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  userId      String   @mongodb.ObjectId
  user        User     @relation("UserBackings", fields: [userId], references: [id], onDelete: Cascade)
  campaignId  String   @mongodb.ObjectId
  campaign    Campaign @relation("CampaignBackers", fields: [campaignId], references: [id], onDelete: Cascade)
  rewardId    String?  @mongodb.ObjectId
  reward      Reward?  @relation("RewardBackers", fields: [rewardId], references: [id], onDelete: SetNull)
  amount      Float
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, campaignId])
  @@index([userId])
  @@index([campaignId])
  @@index([rewardId])
}

model Milestone {
  id                   String          @id @default(auto()) @map("_id") @mongodb.ObjectId
  title                String
  description          String
  targetDate           DateTime?
  completionPercentage Int             @default(0)
  status               MilestoneStatus @default(PENDING)
  campaignId           String          @mongodb.ObjectId
  campaign             Campaign        @relation("CampaignMilestones", fields: [campaignId], references: [id], onDelete: Cascade)
  fundingAmount        Float           @default(0)
  evidence             String? // Link or document proving milestone completion
  completedAt          DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  @@index([campaignId])
  @@index([status])
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

model Reward {
  id                    String        @id @default(auto()) @map("_id") @mongodb.ObjectId
  title                 String
  description           String
  amount                Float
  deliveryDate          DateTime?
  campaignId            String        @mongodb.ObjectId
  campaign              Campaign      @relation("CampaignRewards", fields: [campaignId], references: [id], onDelete: Cascade)
  maxClaimable          Int? // Optional limit on how many can be claimed
  claimed               Int           @default(0)
  readyForClaimAt       DateTime?
  backers               Backers[]     @relation("RewardBackers")
  image                 String?
  shippingRequired      Boolean       @default(false)
  estimatedShippingCost Float?
  transactions          Transaction[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([campaignId])
}

model Activity {
  id          String       @id @default(auto()) @map("_id") @mongodb.ObjectId
  type        ActivityType
  description String
  campaignId  String       @mongodb.ObjectId
  campaign    Campaign     @relation("CampaignActivities", fields: [campaignId], references: [id], onDelete: Cascade)
  userId      String?      @mongodb.ObjectId // Optional reference to user who caused the activity
  metadata    Json? // Optional additional data about the activity
  createdAt   DateTime     @default(now())

  @@index([campaignId])
  @@index([type])
  @@index([createdAt])
}

enum ActivityType {
  CONTRIBUTION
  MILESTONE_COMPLETED
  CAMPAIGN_CREATED
  CAMPAIGN_UPDATED
  REWARD_CLAIMED
  COMMENT_ADDED
  STATUS_CHANGED
  REFUND_ISSUED
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

model UserOrg {
  id        String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  userId    String   @mongodb.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      OrgRole  @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@index([role])
}

enum OrgRole {
  ADMIN
  MEMBER
  VIEWER
}

model Comment {
  id         String    @id @default(auto()) @map("_id") @mongodb.ObjectId
  content    String
  campaignId String    @mongodb.ObjectId
  campaign   Campaign  @relation("CampaignComments", fields: [campaignId], references: [id], onDelete: Cascade)
  userId     String    @mongodb.ObjectId
  user       User      @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  parentId   String?   @mongodb.ObjectId
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Comment[] @relation("CommentReplies")
  isHidden   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([campaignId])
  @@index([userId])
  @@index([parentId])
}

model NotificationSettings {
  id                    String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  userId                String   @unique @mongodb.ObjectId
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  newBackerNotification Boolean  @default(true)
  commentNotification   Boolean  @default(true)
  updateNotification    Boolean  @default(true)
  milestoneNotification Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
