datasource mongodb {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @mongodb.ObjectId
  userId            String  @mongodb.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  sessionToken String   @unique
  userId       String   @mongodb.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String        @id @default(auto()) @map("_id") @mongodb.ObjectId
  name             String?
  displayName      String?
  email            String?       @unique
  emailVerified    DateTime?
  image            String?
  onboarded        Boolean       @default(false)
  role             Role?         @default(INVESTOR)
  bio              String?
  location         String?
  walletAddress    String?
  accounts         Account[]
  sessions         Session[]
  wallet           Wallet?
  createdCampaigns Campaign[]    @relation("UserCampaigns")
  backings         Backers[]     @relation("UserBackings")
  transactions     Transaction[] @relation("UserTransactions")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

enum Role {
  INVESTOR
  CREATOR
}

model Wallet {
  id          String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  address     String   @unique
  isConnected Boolean
  caipAddress String
  status      String
  userId      String?  @unique @mongodb.ObjectId
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Campaign {
  id               String         @id @default(auto()) @map("_id") @mongodb.ObjectId
  slug             String         @unique
  title            String
  shortDescription String
  description      String
  goal             Float
  durationDays     Int
  ipfsHash         String?
  images           String[]
  category         String
  tags             String[]
  riskAssessment   String?
  website          String?
  twitter          String?
  instagram        String?
  linkedin         String?
  github           String?
  creatorId        String?        @mongodb.ObjectId
  creatorName      String
  creatorAvatar    String
  raisedAmount     Float          @default(0)
  daysLeft         Int?
  milestones       Milestone[]    @relation("CampaignMilestones")
  rewards          Reward[]       @relation("CampaignRewards")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  backers          Backers[]      @relation("CampaignBackers")
  transactions     Transaction[]  @relation("CampaignTransactions")
  creator          User?          @relation("UserCampaigns", fields: [creatorId], references: [id], onDelete: SetNull)
  activities       Activity[]     @relation("CampaignActivities")
  status           CampaignStatus @default(ACTIVE)
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  FUNDED
  COMPLETED
  CANCELLED
}

model Transaction {
  id         String            @id @default(auto()) @map("_id") @mongodb.ObjectId
  amount     Float
  userId     String            @mongodb.ObjectId
  user       User              @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
  campaignId String            @mongodb.ObjectId
  campaign   Campaign          @relation("CampaignTransactions", fields: [campaignId], references: [id], onDelete: Cascade)
  rewardId   String?           @mongodb.ObjectId
  reward     Reward?           @relation(fields: [rewardId], references: [id], onDelete: SetNull)
  txHash     String? // Blockchain transaction hash
  status     TransactionStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Backers {
  id         String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  userId     String   @mongodb.ObjectId
  user       User     @relation("UserBackings", fields: [userId], references: [id], onDelete: Cascade)
  campaignId String   @mongodb.ObjectId
  campaign   Campaign @relation("CampaignBackers", fields: [campaignId], references: [id], onDelete: Cascade)
  amount     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Milestone {
  id                   String          @id @default(auto()) @map("_id") @mongodb.ObjectId
  title                String
  description          String
  targetDate           String?
  completionPercentage Int             @default(0)
  status               MilestoneStatus @default(PENDING)
  campaignId           String          @mongodb.ObjectId
  campaign             Campaign        @relation("CampaignMilestones", fields: [campaignId], references: [id], onDelete: Cascade)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  fundingAmount        Float           @default(0)
}

enum MilestoneStatus {
  PENDING
  COMPLETED
}

model Reward {
  id           String        @id @default(auto()) @map("_id") @mongodb.ObjectId
  title        String
  description  String
  amount       Float
  deliveryDate String?
  campaignId   String        @mongodb.ObjectId
  campaign     Campaign      @relation("CampaignRewards", fields: [campaignId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  maxClaimable Int? // Optional limit on how many can be claimed
  claimed      Int           @default(0)
}

model Activity {
  id          String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  createdAt   DateTime @default(now())
  type        String // e.g., "contribution", "milestone_completed"
  description String
  campaignId  String   @mongodb.ObjectId
  campaign    Campaign @relation("CampaignActivities", fields: [campaignId], references: [id], onDelete: Cascade)
  userId      String?  @mongodb.ObjectId // Optional reference to user who caused the activity
  metadata    Json? // Optional additional data about the activity
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @mongodb.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
